summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Customer.Type) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of customer travel type(count)(by satisfaction)
type_count <- ggplot(Data, aes(x = Data[, 5], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of travel intent, by satisfaction") +
xlab("Travel intent") +
theme(legend.title=element_blank())
type_count
Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of customer seat class (count)(by satisfaction)
class_count <- ggplot(Data, aes(x = Data[, 6], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of seat class, by satisfaction") +
xlab("Seat classes") +
theme(legend.title=element_blank())
class_count
Data %>%
group_by(Class) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Class) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(Data)){
var = names(Data)[i]
if(is.numeric(Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(Data, aes(, Data[, i])) +
geom_histogram(bins = 5) +
labs(title = var) +
coord_flip() +
ylab(var) +
theme_minimal()
print(plot_list[[i]])
}
else if(is.factor(Data[, i]) == TRUE){
plot_list[[i]] = ggplot(Data, aes(, Data[, i])) +
geom_bar() +
labs(title = var) +
coord_flip() +
ylab(var) +
theme_minimal()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
# plot of seat comfort (count)(by satisfaction)
seatcomfort_count <- ggplot(factorData, aes(x = factorData[, 8], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of seat comfort, by satisfaction") +
xlab("Seat comfort score") +
theme(legend.title=element_blank())
seatcomfort_count
Data %>%
group_by(Seat.comfort) %>%
summarise(percent = 100 * n() / nrow(Data))
# plot of dep and arr time convenience (count)(by satisfaction)
deparrtimeconv_count <- ggplot(factorData, aes(x = factorData[, 9], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of time convenience, by satisfaction") +
xlab("Time convenience score") +
theme(legend.title=element_blank())
deparrtimeconv_count
Data %>%
group_by(Departure.Arrival.time.convenient) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Departure.Arrival.time.convenient) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
Data %>%
group_by(satisfaction) %>%
summarise(percent = 100 * n() / nrow(Data))
# plot of food and drink (count)(by satisfaction)
foodanddrink_count <- ggplot(factorData, aes(x = factorData[, 10], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of food and drink, by satisfaction") +
xlab("Food and drink score") +
theme(legend.title=element_blank())
foodanddrink_count
Data %>%
group_by(Food.and.drink) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Food.and.drink) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of gate location (count)(by satisfaction)
gatelocation_count <- ggplot(factorData, aes(x = factorData[, 11], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of gate location, by satisfaction") +
xlab("Gate location score") +
theme(legend.title=element_blank())
gatelocation_count
Data %>%
group_by(Gate.location) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Gate.location) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of inflight wifi (count)(by satisfaction)
inflightwifi_count <- ggplot(factorData, aes(x = factorData[, 12], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of in-flight wi-fi, by satisfaction") +
xlab("In-flight wi-fi score") +
theme(legend.title=element_blank())
inflightwifi_count
Data %>%
group_by(Inflight.wifi.service) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Inflight.wifi.service) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of inflight entertainment (count)(by satisfaction)
inflightent_count <- ggplot(factorData, aes(x = factorData[, 13], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of in-flight entertainment, by satisfaction") +
xlab("In-flight entertainment score") +
theme(legend.title=element_blank())
inflightent_count
Data %>%
group_by(Inflight.entertainment) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Inflight.entertainment) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of online support (count)(by satisfaction)
onlinesup_count <- ggplot(factorData, aes(x = factorData[, 14], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of online support, by satisfaction") +
xlab("Online support score") +
theme(legend.title=element_blank())
onlinesup_count
Data %>%
group_by(Online.support) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Online.support) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of ease of online booking (count)(by satisfaction)
easeofbooking_count <- ggplot(factorData, aes(x = factorData[, 15], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of ease of online booking, by satisfaction") +
xlab("Ease of online booking score") +
theme(legend.title=element_blank())
easeofbooking_count
Data %>%
group_by(Ease.of.Online.booking) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Ease.of.Online.booking) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# missing values per column check (~300 rows are missing value in arrivalDelay)
cbind(
lapply(
lapply(Data, is.na)
, sum)
)
check = read.csv("Invistico_Airline.csv", stringAsFactors = FALSE)
check = read.csv("Invistico_Airline.csv", stringsAsFactors = FALSE)
# missing values per column check (~300 rows are missing value in arrivalDelay)
cbind(
lapply(
lapply(check, is.na)
, sum)
)
# plot of on-board service (count)(by satisfaction)
onboardserv_count <- ggplot(factorData, aes(x = factorData[, 16], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of on-board service, by satisfaction") +
xlab("On-board service score") +
theme(legend.title=element_blank())
onboardserv_count
# clustering
kmm = kmeans(scaled_data, 5, nstart = 50, iter.max = 50)
kmm
# clustering
kmm = kmeans(scaled_data, 5, nstart = 50, iter.max = 50)
# libraries
library(ggplot2)
library(tidyverse)
library(flexclust)
library(janitor)
library(cowplot)
library(e1071)
library(caret)
library(mclust)
library(NbClust)
library(klaR)
library(C50)
library(Boruta)
library(corrplot)
library(ggcorrplot)
library(ROCR)
library(pROC)
# load dataset as 'Data'
Data = read.csv("Invistico_Airline.csv", stringsAsFactors = FALSE)
# basic observations
head(Data)
summary(Data)
dim(Data)
# missing values per column check (~300 rows are missing value in arrivalDelay)
cbind(
lapply(
lapply(check, is.na)
, sum)
)
# remove observations with missing values (small number, appropriate)
Data <- na.omit(Data)
# inspect column types - char columns exist
for(i in 1:(ncol(Data))) {
if(is.numeric(Data[, i]) == TRUE){
cat(sprintf("column %s is numeric\n", i))
}
else if(is.factor(Data[, i]) == TRUE){
cat(sprintf("column %s is factor\n", i))
}
else{
cat(sprintf("column %s is char\n", i))
}
}
# convert char columns to factor
for(i in 1:ncol(Data)){
if(is.character(Data[, i]) == TRUE){
Data[, i] <- as.factor(Data[, i])
if(is.factor(Data[, i]) == TRUE){
cat(sprintf("feature %s has been converted into factor\n", i))
cat(sprintf("with levels: %s\n", levels(Data[, i])))
}
}
}
# separate satisfaction and dissatisfaction
sat_Data <- Data %>% filter(satisfaction == 'satisfied')
summary(sat_Data)
dissat_Data <- Data %>% filter(satisfaction == 'dissatisfied')
summary(dissat_Data)
# redefine data_att (must be as such, can only be used on cont variables)
clustData <- Data[, 2:23]
clustData_OH <- model.matrix(~0+., data=clustData)[,2:21]
clustData_OH_scaled <- as.data.frame(scale(clustData_OH, center=TRUE, scale=TRUE))
scaled_data <- clustData_OH_scaled
# initial clustering
kmm = kmeans(scaled_data, 3, nstart = 50, iter.max = 50)
kmm
# set seed
set.seed(123)
# elbow method
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(scaled_data, k, nstart=50,iter.max = 50)$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
# bayesian inference criterion
d_clust <- Mclust(as.matrix(scaled_data), G=1:15,
modelNames = mclust.options("emModelNames"))
d_clust$BIC
plot(d_clust)
# clustering
kmm = kmeans(scaled_data, 5, nstart = 50, iter.max = 50)
kmm
# means per cluster
aggregate(clustData_OH, by=list(cluster=kmm$cluster), mean)
# adding cluster assignments to dataset
Data_clustered <- cbind(Data, cluster = kmm$cluster)
# clustering
kmm = kmeans(scaled_data, 4, nstart = 50, iter.max = 50)
kmm
# means per cluster
aggregate(clustData_OH, by=list(cluster=kmm$cluster), mean)
# count plots by satisfaction
# plot of age (count)
age_count <- ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of Age") +
xlab("Ages (years)")
age_count
# plot of age GROUPS (count)(by satisfaction)
# grouping ages by tens
ageplotdata <- Data
for (i in 1:nrow(ageplotdata)){
if (ageplotdata[i, 4] >= 0 && ageplotdata[i, 4] <= 10){
ageplotdata[i, 4] <- "0-10"
}
if (ageplotdata[i, 4] >= 11 && ageplotdata[i, 4] <= 20){
ageplotdata[i, 4] <- "11-20"
}
if (ageplotdata[i, 4] >= 21 && ageplotdata[i, 4] <= 30){
ageplotdata[i, 4] <- "21-30"
}
if (ageplotdata[i, 4] >= 31 && ageplotdata[i, 4] <= 40){
ageplotdata[i, 4] <- "31-40"
}
if (ageplotdata[i, 4] >= 41 && ageplotdata[i, 4] <= 50){
ageplotdata[i, 4] <- "41-50"
}
if (ageplotdata[i, 4] >= 51 && ageplotdata[i, 4] <= 60){
ageplotdata[i, 4] <- "51-60"
}
if (ageplotdata[i, 4] >= 61){
ageplotdata[i, 4] <- "61+"
}
}
ageplotdata[, 4] <- as.factor(ageplotdata[, 4])
# plot of age groups (count)(by satisfaction)
agegroup_count <- ggplot(ageplotdata, aes(x = ageplotdata[, 4], fill = ageplotdata[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of age groups, by satisfaction") +
xlab("Age groups (years)") +
theme(legend.title=element_blank())
agegroup_count
View(Data)
# initialize dataset with ALL factor variables (for more graphs)
factorData <- ageplotdata[1:21]
# convert flight distance to factor
for (i in 1:nrow(factorData)){
if (factorData[i, 7] >= 0 && factorData[i, 7] <= 1000){
factorData[i, 7] <- "0-1000"
}
if (factorData[i, 7] >= 1001 && factorData[i, 7] <= 2000){
factorData[i, 7] <- "1001-2000"
}
if (factorData[i, 7] >= 2001 && factorData[i, 7] <= 3000){
factorData[i, 7] <- "2001-3000"
}
if (factorData[i, 7] >= 3001 && factorData[i, 7] <= 4000){
factorData[i, 7] <- "3001-4000"
}
if (factorData[i, 7] >= 4001){
factorData[i, 7] <- "4001+"
}
}
factorData[, 7] <- as.factor(factorData[, 7])
# convert Likert scales to factor
for(i in 1:ncol(factorData)){
if(is.numeric(factorData[, i]) == TRUE){
factorData[, i] <- as.factor(factorData[, i])
if(is.factor(factorData[, i]) == TRUE){
cat(sprintf("feature %s has been converted into factor\n", i))
cat(sprintf("with levels: %s\n", levels(Data[, i])))
}
}
}
# plot of on-board service (count)(by satisfaction)
onboardserv_count <- ggplot(factorData, aes(x = factorData[, 16], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of on-board service, by satisfaction") +
xlab("On-board service score") +
theme(legend.title=element_blank())
onboardserv_count
Data %>%
group_by(Ease.of.Online.booking) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Ease.of.Online.booking) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of leg room (count)(by satisfaction)
legroom_count <- ggplot(factorData, aes(x = factorData[, 17], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of leg room, by satisfaction") +
xlab("Leg room score") +
theme(legend.title=element_blank())
legroom_count
Data %>%
group_by(Leg.room.service) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Leg.room.service) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of baggage handling (count)(by satisfaction)
baghandle_count <- ggplot(factorData, aes(x = factorData[, 18], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of baggage handling, by satisfaction") +
xlab("Baggage handling score") +
theme(legend.title=element_blank())
baghandle_count
Data %>%
group_by(Baggage.handling) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Baggage.handling) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of check-in service (count)(by satisfaction)
checkin_count <- ggplot(factorData, aes(x = factorData[, 19], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of check-in service, by satisfaction") +
xlab("Check-in service score") +
theme(legend.title=element_blank())
checkin_count
Data %>%
group_by(Checkin.service) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Checkin.service) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of cleanliness (count)(by satisfaction)
cleanliness_count <- ggplot(factorData, aes(x = factorData[, 20], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of cleanliness, by satisfaction") +
xlab("Cleanliness score") +
theme(legend.title=element_blank())
cleanliness_count
Data %>%
group_by(Cleanliness) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Cleanliness) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# plot of online boarding (count)(by satisfaction)
onlineboard_count <- ggplot(factorData, aes(x = factorData[, 21], fill = factorData[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal() +
labs(title = "Distribution of online boarding, by satisfaction") +
xlab("Online boarding score") +
theme(legend.title=element_blank())
onlineboard_count
Data %>%
group_by(Online.boarding) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Online.boarding) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(Data)){
var = names(Data)[i]
if(is.numeric(Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(Data, aes(, Data[, i])) +
geom_histogram(bins = 5) +
labs(title = var) +
coord_flip() +
ylab(var) +
theme_minimal()
print(plot_list[[i]])
}
else if(is.factor(Data[, i]) == TRUE){
plot_list[[i]] = ggplot(Data, aes(, Data[, i])) +
geom_bar() +
labs(title = var) +
coord_flip() +
ylab(var) +
theme_minimal()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
Data %>%
group_by(Gender) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Gender) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
Data %>%
group_by(Customer.Type) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Customer.Type) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Type.of.Travel) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
Data %>%
group_by(Class) %>%
summarise(percent = 100 * n() / nrow(Data))
sat_Data %>%
group_by(Class) %>%
summarise(percent = 100 * n() / nrow(sat_Data))
kmm
# means per cluster
aggregate(clustData_OH, by=list(cluster=kmm$cluster), mean)
View(clustData)
