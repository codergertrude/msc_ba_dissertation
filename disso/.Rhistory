}
}
}
# remove observations with missing values (small number)
Data <- na.omit(Data)
# basic plots of each feature
plot_list = list()
# decision tree classification
cat("Decision Tree implementation")
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = C5.0(x = training_data[, 2:ncol(testing_data)], y = training_data[, 1])
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "prob")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
# partition percentage for loop
training_data_percentages <- seq(from = 0.1, to = 0.9, length.out = 9)
# decision tree classification
cat("Decision Tree implementation")
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = C5.0(x = training_data[, 2:ncol(testing_data)], y = training_data[, 1])
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "prob")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
library(ROCR)
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = C5.0(x = training_data[, 2:ncol(testing_data)], y = training_data[, 1])
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "prob")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
library(pROC)
# decision tree classification
cat("Decision Tree implementation")
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = C5.0(x = training_data[, 2:ncol(testing_data)], y = training_data[, 1])
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "prob")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
# nb classification
cat("Naive Bayes implementation")
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = naiveBayes(satisfaction ~ ., data = training_data, laplace=0)
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[,2:ncol(testing_data)], type = "prob")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
# nb classification
cat("Naive Bayes implementation")
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = naiveBayes(satisfaction ~ ., data = training_data, laplace=0)
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "raw")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for Decision Tree, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
}
# plot it up!
p <- ggplot(Data, aes(x = age)) + geom_bar() +
facet_wrap( ~ satisfaction, ncol = 2)
print(p)
View(Data)
# plot it up!
p <- ggplot(Data, aes(x = Data$age)) + geom_bar() +
facet_wrap( ~ satisfaction, ncol = 2)
print(p)
# plot it up!
p <- ggplot(Data, aes(x = Data$age)) + geom_bar()
print(p)
# plot it up!
p<-ggplot(data=Data, aes(x=age, y=len)) +
geom_bar(stat="identity")
p
# plot it up!
p<-ggplot(data=Data, aes(x=Data[, 4], y=len)) +
geom_bar(stat="identity")
p
# plot it up!
p<-ggplot(data=Data, aes(x=Data[, 4], y=Data[, 4])) +
geom_bar(stat="identity")
p
# plot it up!
p<-ggplot(Data, aes(x=Data[, 4])) +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
p
# plot it up!
p<-ggplot(Data, aes(x=Data[, 4])) +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
p
# plot it up!
ggplot(Data, aes(x=Data[, 4])) +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
p
# plot it up!
p<-ggplot(Data, aes(x=Data[, 4])) +
geom_bar(stat="bin", width=0.7, fill="steelblue")
p
# plot it up!
p<-ggplot(Data, aes(x=Data[, 4])) +
geom_bar(width=0.7, fill="steelblue")
p
# plot it up!
p<-ggplot(Data, aes(x=Data[, 4])) +
geom_bar(width=0.7, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x=age) +
theme_minimal()
# plot it up!
p<-ggplot(Data, aes(x=age)) +
geom_bar(width=0.7, fill="steelblue") +
theme_minimal()
# plot it up!
p<-ggplot(Data, aes(x = Data$age)) +
geom_bar(width=0.7, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.7, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.9, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.8, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.5, fill="steelblue") +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(stat = "identity", width=0.5, fill = Data[, 1], position = position_dodge()) +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4], y = Data[, 4])) +
geom_bar(stat = "identity", width=0.5, fill = Data[, 1], position = position_dodge()) +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4], y = Data[, 4]), fill = Data[, 1]) +
geom_bar(stat = "identity", width=0.5, position = position_dodge()) +
theme_minimal()
p
# plot it up!
p<-ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
p
(
(
gender_count <- ggplot(Data, aes(x = Data[, 2])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
# redefine data_att
data_att <- Data[, 8:21]
gender_count
gender_count <- ggplot(Data, aes(x = Data[, 2])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
gender_count
# plot it up!
age_count <- ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
age_count
gender_count <- ggplot(Data, aes(x = Data[, 2])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
gender_count
gender_count <- ggplot(Data, aes(x = Data[, 2], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
gender_count
# plot of customer type (count)(by satisfaction)
gender_count <- ggplot(Data, aes(x = Data[, 3], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
gender_count
loyalty_count
# plot of customer type (count)(by satisfaction)
loyalty_count <- ggplot(Data, aes(x = Data[, 3], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
loyalty_count
type_count <- ggplot(Data, aes(x = Data[, 5], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
type_count
# plot of customer seat class (count)(by satisfaction)
class_count <- ggplot(Data, aes(x = Data[, 6], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
class_count
age_count
# plot of age GROUPS (count)(by satisfaction)
ageplotdata <- Data
# plot of age GROUPS (count)(by satisfaction)
ageplotdata <- Data
for (i in 1:nrow(ageplotdata)){
if (ageplotdata[i, 4] >= 0 && ageplotdata[i, 4] <= 10){
ageplotdata[i, 4] <- "0-10"
}
if (ageplotdata[i, 4] >= 11 && ageplotdata[i, 4] <= 20){
ageplotdata[i, 4] <- "11-20"
}
if (ageplotdata[i, 4] >= 21 && ageplotdata[i, 4] <= 30){
ageplotdata[i, 4] <- "21-30"
}
if (ageplotdata[i, 4] >= 31 && ageplotdata[i, 4] <= 40){
ageplotdata[i, 4] <- "31-40"
}
if (ageplotdata[i, 4] >= 41 && ageplotdata[i, 4] <= 50){
ageplotdata[i, 4] <- "41-50"
}
if (ageplotdata[i, 4] >= 60){
ageplotdata[i, 4] <- "60+"
}
}
View(ageplotdata)
Data[, 4] <- as.factor(Data[, 4])
agegroup_count <- ggplot(Data, aes(x = Data[, 4], fill = Data[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
agegroup_count
agegroup_count <- ggplot(ageplotdata, aes(x = ageplotdata[, 4], fill = ageplotdata[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
agegroup_count
# plot of age GROUPS (count)(by satisfaction)
ageplotdata <- Data
for (i in 1:nrow(ageplotdata)){
if (ageplotdata[i, 4] >= 0 && ageplotdata[i, 4] <= 10){
ageplotdata[i, 4] <- "0-10"
}
if (ageplotdata[i, 4] >= 11 && ageplotdata[i, 4] <= 20){
ageplotdata[i, 4] <- "11-20"
}
if (ageplotdata[i, 4] >= 21 && ageplotdata[i, 4] <= 30){
ageplotdata[i, 4] <- "21-30"
}
if (ageplotdata[i, 4] >= 31 && ageplotdata[i, 4] <= 40){
ageplotdata[i, 4] <- "31-40"
}
if (ageplotdata[i, 4] >= 41 && ageplotdata[i, 4] <= 50){
ageplotdata[i, 4] <- "41-50"
}
if (ageplotdata[i, 4] >= 51 && ageplotdata[i, 4] <= 60){
ageplotdata[i, 4] <- "51-60"
}
if (ageplotdata[i, 4] >= 61){
ageplotdata[i, 4] <- "61+"
}
}
# plot of age GROUPS (count)(by satisfaction)
ageplotdata <- Data
for (i in 1:nrow(ageplotdata)){
if (ageplotdata[i, 4] >= 0 && ageplotdata[i, 4] <= 10){
ageplotdata[i, 4] <- "0-10"
}
if (ageplotdata[i, 4] >= 11 && ageplotdata[i, 4] <= 20){
ageplotdata[i, 4] <- "11-20"
}
if (ageplotdata[i, 4] >= 21 && ageplotdata[i, 4] <= 30){
ageplotdata[i, 4] <- "21-30"
}
if (ageplotdata[i, 4] >= 31 && ageplotdata[i, 4] <= 40){
ageplotdata[i, 4] <- "31-40"
}
if (ageplotdata[i, 4] >= 41 && ageplotdata[i, 4] <= 50){
ageplotdata[i, 4] <- "41-50"
}
if (ageplotdata[i, 4] >= 51 && ageplotdata[i, 4] <= 60){
ageplotdata[i, 4] <- "51-60"
}
if (ageplotdata[i, 4] >= 61){
ageplotdata[i, 4] <- "61+"
}
}
# load dataset as 'Data'
Data = read.csv("Invistico_Airline.csv", stringsAsFactors = FALSE)
# basic observations
head(Data)
summary(Data)
dim(Data)
# missing values per column check
cbind(
lapply(
lapply(Data, is.na)
, sum)
)
# inspect column types - char columns exist
for(i in 1:(ncol(Data))) {
if(is.numeric(Data[, i]) == TRUE){
cat(sprintf("column %s is numeric\n", i))
}
else if(is.factor(Data[, i]) == TRUE){
cat(sprintf("column %s is factor\n", i))
}
else{
cat(sprintf("column %s is char\n", i))
}
}
# convert char columns to factor
for(i in 1:ncol(Data)){
if(is.character(Data[, i]) == TRUE){
Data[, i] <- as.factor(Data[, i])
if(is.factor(Data[, i]) == TRUE){
cat(sprintf("feature %s has been converted into factor\n", i))
cat(sprintf("with levels: %s\n", levels(Data[, i])))
}
}
}
# remove observations with missing values (small number)
Data <- na.omit(Data)
# count plots by satisfaction
# plot of age (count)
age_count <- ggplot(Data, aes(x = Data[, 4])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
age_count
# plot of age GROUPS (count)(by satisfaction)
ageplotdata <- Data
for (i in 1:nrow(ageplotdata)){
if (ageplotdata[i, 4] >= 0 && ageplotdata[i, 4] <= 10){
ageplotdata[i, 4] <- "0-10"
}
if (ageplotdata[i, 4] >= 11 && ageplotdata[i, 4] <= 20){
ageplotdata[i, 4] <- "11-20"
}
if (ageplotdata[i, 4] >= 21 && ageplotdata[i, 4] <= 30){
ageplotdata[i, 4] <- "21-30"
}
if (ageplotdata[i, 4] >= 31 && ageplotdata[i, 4] <= 40){
ageplotdata[i, 4] <- "31-40"
}
if (ageplotdata[i, 4] >= 41 && ageplotdata[i, 4] <= 50){
ageplotdata[i, 4] <- "41-50"
}
if (ageplotdata[i, 4] >= 51 && ageplotdata[i, 4] <= 60){
ageplotdata[i, 4] <- "51-60"
}
if (ageplotdata[i, 4] >= 61){
ageplotdata[i, 4] <- "61+"
}
}
agegroup_count[, 4] <- as.factor(agegroup_count[, 4])
agegroup_count <- ggplot(ageplotdata, aes(x = ageplotdata[, 4], fill = ageplotdata[, 1])) +
geom_bar(width=0.5, position = position_dodge()) +
theme_minimal()
agegroup_count
Data %>% filter(satisfaction == 'satisfied')
sat_Data <- Data %>% filter(satisfaction == 'satisfied')
dissat_Data <- Data %>% filter(satisfaction == 'dissatisfied')
summary(sat_Data)
summary(dissat_Data)
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(sat_Data)){
var = names(sat_Data)[i]
if(is.numeric(sat_Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_histogram(bins = 5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else if(is.factor(sat_Data[, i]) == TRUE){
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_bar() + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(sat_Data)){
var = names(sat_Data)[i]
if(is.numeric(sat_Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_histogram(bins = 5, width=0.5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else if(is.factor(sat_Data[, i]) == TRUE){
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_bar(width=0.5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(sat_Data)){
var = names(sat_Data)[i]
if(is.numeric(sat_Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_histogram(bins = 5, width=0.5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else if(is.factor(sat_Data[, i]) == TRUE){
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_bar() + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(sat_Data)){
var = names(sat_Data)[i]
if(is.numeric(sat_Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_histogram(bins = 5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else if(is.factor(sat_Data[, i]) == TRUE){
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) + geom_bar(width = 0.5) + labs(title = var) + coord_flip()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
# basic plots of each feature
plot_list = list()
for(i in 1:ncol(sat_Data)){
var = names(sat_Data)[i]
if(is.numeric(sat_Data[, i]) == TRUE){
# plot_list[[i]] = ggplot(Data, aes(, Data[, i])) + geom_boxplot() + labs(title = var)
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) +
geom_histogram(bins = 5) +
labs(title = var) +
coord_flip() +
theme_minimal()
print(plot_list[[i]])
}
else if(is.factor(sat_Data[, i]) == TRUE){
plot_list[[i]] = ggplot(sat_Data, aes(, sat_Data[, i])) +
geom_bar(width = 0.5) +
labs(title = var) +
coord_flip() +
theme_minimal()
print(plot_list[[i]])
}
else{
cat(sprintf("feature %s is not graphable\n", i))
}
}
