# Convert decision confidence to factor, produce confusion matrix.
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
# Add results to table.
dtResults[t*10, 1] <- t
dtResults[t*10, 2] <- cm$overall[1]
dtResults[t*10, 3] <- cm$byClass[1]
dtResults[t*10, 4] <- cm$byClass[2]
dtResults[t*10, 5] <- cm$byClass[7]
}
# nb classification
cat("Naive Bayes implementation")
# Initialise results table.
nbResults <- data.frame(matrix(ncol = 5, nrow = 0, dimnames = list(NULL, c("Split Ratio", "Accuracy", "Sensitivity", "Specificity", "F1-Score"))))
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = naiveBayes(satisfaction ~ ., data = training_data, laplace=0)
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "raw")[, 2]
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for NB, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
nbResults[t*10, 1] <- t
nbResults[t*10, 2] <- cm$overall[1]
nbResults[t*10, 3] <- cm$byClass[1]
nbResults[t*10, 4] <- cm$byClass[2]
nbResults[t*10, 5] <- cm$byClass[7]
}
# Logistic regression algorithm
cat("Logistic regression implementation")
lrResults <- data.frame(matrix(ncol = 5, nrow = 0, dimnames = list(NULL, c("Split Ratio", "Accuracy", "Sensitivity", "Specificity", "F1-Score"))))
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current training partition: %s\n", t))
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
set.seed(42)
TrainedClassifier = glm(satisfaction ~ .,family=binomial(link='logit'), data = training_data)
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "response")
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
plot(roc_score, main = paste("ROC Curve for LR, Split Ratio", t*100, "-", (1-t)*100))
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
lrResults[t*10, 1] <- t
lrResults[t*10, 2] <- cm$overall[1]
lrResults[t*10, 3] <- cm$byClass[1]
lrResults[t*10, 4] <- cm$byClass[2]
lrResults[t*10, 5] <- cm$byClass[7]
}
roc_score
# partition percentage for loop
training_data_percentages <- seq(from = 0.1, to = 0.9, length.out = 9)
# decision tree classification (looping through 9 possible splits)
cat("Decision Tree implementation")
dtResults <- data.frame(matrix(ncol = 5, nrow = 0, dimnames = list(NULL, c("Split Ratio", "Accuracy", "Sensitivity", "Specificity", "F1-Score"))))
for(t in training_data_percentages){
print("================================================================================================================")
cat(sprintf("Current train-test split: %s-%1.0f\n", t*100, (1-t)*100))
# partition setup
indx_partition = createDataPartition(Data[, ncol(Data)], p = t, list = FALSE)
training_data = Data[indx_partition,]
testing_data = Data[-indx_partition,]
# Set seed for reproducability of results.
set.seed(42)
# Train classifier using library, make predictions using trained model.
TrainedClassifier = C5.0(x = training_data[, 2:ncol(testing_data)], y = training_data[, 1])
Predicted_outcomes = predict(TrainedClassifier, newdata = testing_data[, 2:ncol(testing_data)], type = "prob")[, 2]
# Calculate AUC from decision confidence, draw ROC curve.
roc_score = roc(testing_data$satisfaction, Predicted_outcomes) #AUC score
roc_score
plot(roc_score, main = paste("ROC Curve for DT, Split Ratio", t*100, "-", (1-t)*100))
# Convert decision confidence to factor, produce confusion matrix.
Predicted_outcomes <- as.factor(ifelse(Predicted_outcomes > 0.5, "satisfied", "dissatisfied"))
cm <- confusionMatrix(testing_data[, 1], Predicted_outcomes)
print(cm)
# Add results to table.
dtResults[t*10, 1] <- t
dtResults[t*10, 2] <- cm$overall[1]
dtResults[t*10, 3] <- cm$byClass[1]
dtResults[t*10, 4] <- cm$byClass[2]
dtResults[t*10, 5] <- cm$byClass[7]
}
roughFixMod <- TentativeRoughFix(boruta_output)
imps <- attStats(roughFixMod)
imps2 = imps[imps$decision != 'Rejected', c('meanImp', 'decision')]
head(imps2[order(-imps2$meanImp), ])  # descending sort
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")
View(clustData)
View(clustData_OH)
clustData_OH <- model.matrix(~0+., data=clustData)[,2:22]
View(clustData_OH)
clustData_OH <- model.matrix(~0+., data=clustData)[,2:23]
clustData_OH_scaled <- as.data.frame(scale(clustData_OH, center=TRUE, scale=TRUE))
View(clustData_OH)
clustData_OH <- model.matrix(~0+., data=clustData)[,2:23]
clustData_OH_scaled <- as.data.frame(scale(clustData_OH, center=TRUE, scale=TRUE))
scaled_data <- clustData_OH_scaled
# set seed
set.seed(123)
# elbow method
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(scaled_data, k, nstart=50,iter.max = 50)$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
# bayesian inference criterion
d_clust <- Mclust(as.matrix(scaled_data), G=1:15,
modelNames = mclust.options("emModelNames"))
d_clust$BIC
plot(d_clust)
# elbow method
k.max <- 8
wss <- sapply(1:k.max,
function(k){kmeans(scaled_data, k, nstart=50,iter.max = 50)$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
# bayesian inference criterion
d_clust <- Mclust(as.matrix(scaled_data), G=1:15,
modelNames = mclust.options("emModelNames"))
# bayesian inference criterion
d_clust <- Mclust(as.matrix(scaled_data), G=1:8,
modelNames = mclust.options("emModelNames"))
View(scaled_data)
# bayesian inference criterion
d_clust <- Mclust(as.matrix(scaled_data), G=1:8,
modelNames = mclust.options("emModelNames"))
d_clust$BIC
plot(d_clust)
# clustering
kmm = kmeans(scaled_data, 4, nstart = 30, iter.max = 55)
kmm
# means per cluster
aggregate(clustData_OH, by=list(cluster=kmm$cluster), mean)
# add cluster results here!!!
clustRes <- Data[, 1:23]
clustRes_OH <- model.matrix(~0+., data=clustRes)[,2:21]
# means per cluster
clustMeansDF <- aggregate(clustRes_OH, by=list(cluster=kmm$cluster), mean)
# plot of cluster satisfaction
clust1 <- ggplot(clustMeansDF, aes(x = cluster, y = satisfactionsatisfied, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Cluster means for satisfaction") +
xlab("Clusters") +
ylab("Satisfaction %") +
theme(legend.title=element_blank())
clust2 <- ggplot(clustMeansDF, aes(x = cluster, y = GenderMale, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +  theme_minimal() +
labs(title = "Male customers") +
xlab("Clusters") +
ylab("Male %") +
theme(legend.title=element_blank())
clust3 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 4], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Loyal customers") +
xlab("Clusters") +
ylab("Loyal %") +
theme(legend.title=element_blank())
clust4 <- ggplot(clustMeansDF, aes(x = cluster, y = Age, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Customer age") +
xlab("Clusters") +
ylab("Age") +
theme(legend.title=element_blank())
clust5 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 6], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Personal travel customers") +
xlab("Clusters") +
ylab("Personal travel %") +
theme(legend.title=element_blank())
clust6 <- ggplot(clustMeansDF, aes(x = cluster, y = ClassEco, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Economy class customers") +
xlab("Clusters") +
ylab("Economy class %") +
theme(legend.title=element_blank())
clust7 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 8], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Economy plus class customers") +
xlab("Clusters") +
ylab("Economy plus class %") +
theme(legend.title=element_blank())
clust8 <- ggplot(clustMeansDF, aes(x = cluster, y = Flight.Distance, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Flight distance") +
xlab("Clusters") +
ylab("Flight distance (kms)") +
theme(legend.title=element_blank())
clust9 <- ggplot(clustMeansDF, aes(x = cluster, y = Seat.comfort, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Seat comfort") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust10 <- ggplot(clustMeansDF, aes(x = cluster, y = Departure.Arrival.time.convenient, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Flight time convenience") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust11 <- ggplot(clustMeansDF, aes(x = cluster, y = Food.and.drink, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Food and drink") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust12 <- ggplot(clustMeansDF, aes(x = cluster, y = Gate.location, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Gate location") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust13 <- ggplot(clustMeansDF, aes(x = cluster, y = Inflight.wifi.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "In-flight wifi") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust14 <- ggplot(clustMeansDF, aes(x = cluster, y = Inflight.entertainment, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "In-flight entertainment") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust15 <- ggplot(clustMeansDF, aes(x = cluster, y = Online.support, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Online support") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust16 <- ggplot(clustMeansDF, aes(x = cluster, y = Ease.of.Online.booking, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Online booking") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust17 <- ggplot(clustMeansDF, aes(x = cluster, y = On.board.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Onboard service") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust18 <- ggplot(clustMeansDF, aes(x = cluster, y = Leg.room.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Seat leg room") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust19 <- ggplot(clustMeansDF, aes(x = cluster, y = Baggage.handling, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Baggage handling") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust20 <- ggplot(clustMeansDF, aes(x = cluster, y = Checkin.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Check-in service") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
ggarrange(clust2, clust3, clust4, clust5,
clust6, clust7, clust8, clust9, clust10,
clust11, clust12, clust13, clust14, clust15,
clust16, clust17, clust18, clust19, clust20,
ncol = 5, nrow = 4)
View(clustMeansDF)
clustRes_OH <- model.matrix(~0+., data=clustRes)[,2:23]
View(clustRes_OH)
clustRes_OH <- model.matrix(~0+., data=clustRes)[,2:24]
View(clustRes_OH)
# means per cluster
clustMeansDF <- aggregate(clustRes_OH, by=list(cluster=kmm$cluster), mean)
# plot of cluster satisfaction
clust1 <- ggplot(clustMeansDF, aes(x = cluster, y = satisfactionsatisfied, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Cluster means for satisfaction") +
xlab("Clusters") +
ylab("Satisfaction %") +
theme(legend.title=element_blank())
clust2 <- ggplot(clustMeansDF, aes(x = cluster, y = GenderMale, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +  theme_minimal() +
labs(title = "Male customers") +
xlab("Clusters") +
ylab("Male %") +
theme(legend.title=element_blank())
clust3 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 4], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Loyal customers") +
xlab("Clusters") +
ylab("Loyal %") +
theme(legend.title=element_blank())
clust4 <- ggplot(clustMeansDF, aes(x = cluster, y = Age, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Customer age") +
xlab("Clusters") +
ylab("Age") +
theme(legend.title=element_blank())
clust5 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 6], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Personal travel customers") +
xlab("Clusters") +
ylab("Personal travel %") +
theme(legend.title=element_blank())
clust6 <- ggplot(clustMeansDF, aes(x = cluster, y = ClassEco, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Economy class customers") +
xlab("Clusters") +
ylab("Economy class %") +
theme(legend.title=element_blank())
clust7 <- ggplot(clustMeansDF, aes(x = cluster, y = clustMeansDF[, 8], fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Economy plus class customers") +
xlab("Clusters") +
ylab("Economy plus class %") +
theme(legend.title=element_blank())
clust8 <- ggplot(clustMeansDF, aes(x = cluster, y = Flight.Distance, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Flight distance") +
xlab("Clusters") +
ylab("Flight distance (kms)") +
theme(legend.title=element_blank())
clust9 <- ggplot(clustMeansDF, aes(x = cluster, y = Seat.comfort, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Seat comfort") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust10 <- ggplot(clustMeansDF, aes(x = cluster, y = Departure.Arrival.time.convenient, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Flight time convenience") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust11 <- ggplot(clustMeansDF, aes(x = cluster, y = Food.and.drink, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Food and drink") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust12 <- ggplot(clustMeansDF, aes(x = cluster, y = Gate.location, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Gate location") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust13 <- ggplot(clustMeansDF, aes(x = cluster, y = Inflight.wifi.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "In-flight wifi") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust14 <- ggplot(clustMeansDF, aes(x = cluster, y = Inflight.entertainment, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "In-flight entertainment") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust15 <- ggplot(clustMeansDF, aes(x = cluster, y = Online.support, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Online support") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust16 <- ggplot(clustMeansDF, aes(x = cluster, y = Ease.of.Online.booking, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Online booking") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust17 <- ggplot(clustMeansDF, aes(x = cluster, y = On.board.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Onboard service") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust18 <- ggplot(clustMeansDF, aes(x = cluster, y = Leg.room.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Seat leg room") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust19 <- ggplot(clustMeansDF, aes(x = cluster, y = Baggage.handling, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Baggage handling") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust20 <- ggplot(clustMeansDF, aes(x = cluster, y = Checkin.service, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Check-in service") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
View(clustMeansDF)
clust21 <- ggplot(clustMeansDF, aes(x = cluster, y = Cleanliness, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Cleanliness") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust22 <- ggplot(clustMeansDF, aes(x = cluster, y = Online.boarding, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Online boarding") +
xlab("Clusters") +
ylab("Score out of five") +
theme(legend.title=element_blank())
clust23 <- ggplot(clustMeansDF, aes(x = cluster, y = Departure.Delay.in.Minutes, fill = cluster)) +
geom_bar(stat = 'identity', width=0.5, position = position_dodge(), show.legend = FALSE) +
theme_minimal() +
labs(title = "Departure Delay") +
xlab("Clusters") +
ylab("Minutes") +
theme(legend.title=element_blank())
ggarrange(clust2, clust3, clust4, clust5,
clust6, clust7, clust8, clust9,
clust10, clust11, clust12, clust13,
clust14, clust15, clust16, clust17,
clust18, clust19, clust20, clust21,
clust22, clust23,
ncol = 4, nrow = 6)
print(clust1)
plot(d_clust)
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
ggarrange(clust2, clust3, clust4, clust5,
clust6, clust7, clust8, clust9,
clust10, clust11, clust12, clust13,
clust14, clust15, clust16, clust17,
clust18, clust19, clust20, clust21,
clust22, clust23,
ncol = 4, nrow = 6)
print(clust1)
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares",
abline(v = 4, col = "blue"))
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
abline(v = 4, col = "blue")
abline(v = 4, col="black", lwd=3, lty=2)
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
abline(v = 4, col="black", lwd=3, lty=2)
abline(v = 2, col="black", lwd=3, lty=2)
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters",
ylab="Sum of squares")
abline(v = 2, col="black", lwd=3, lty=2)
d_clust$BIC
print(clust1)
